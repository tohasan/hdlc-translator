package org.tohasan.hdlctranslator.apdu

import org.tohasan.hdlctranslator.common.entities.Frame
import spock.lang.Specification

class ApduFrameSpec extends Specification {
    Frame frame

    def setup() {
        frame = new ApduFrame()
    }

    //	Logical Device Name readout (SN request)
    def "should parse simple READ_REQUEST apdu package"() {
        given:
        def result = frame.parse('E6 E6 00 05 01 02 FD 08')

        expect:
        result ==
                'E6E600 - логическое управление каналом (logical link control)\n' +
                '05 - тип APDU пакета (APDU type) APDU[5]\n' +
                '01 - количество элементов в последовательности (Quantity) - 1\n' +
                '02 - тип переменной доступа (VAS type) VAS[2]\n' +
                'FD08 - короткое имя запрашиваемого объекта (ShortName)'
    }

    // 	Logical Device Name readout (SN response)
    def "should parse simple READ_RESPONSE apdu package"() {
        given:
        def result = frame.parse('E6 E7 00 0C 01 02 01 00 01 0F 01 00 0A 0B 5A 49 50 30 31 37 36 39 33 32 36')

        expect:
        result ==
                'E6E700 - логическое управление каналом (logical link control)\n' +
                '0C - тип APDU пакета (APDU type) APDU[12]\n' +
                '01 - количество элементов в последовательности (Quantity) - 1\n' +
                '02 - тип переменной доступа (ReadResponseFormat) ReadResponse[2]\n' +
                '01 - признак последнего блока (LastBlock flag)\n' +
                '0001 - номер блока данных (BlockNumber) - 1\n' +
                '0F - длина блока данных в байтах (DataBlockLength) - 15\n' +
                '01 - количество элементов в последовательности (Quantity) - 1\n' +
                '00 - значение диагностики источника результата (0x00 - success)\n' +
                '0A - тип данных элемента данных в последовательности (ItemType) - DataType[10]\n' +
                '0B - длина элемента данных в байтах (ItemLength) - 11\n' +
                '5A49503031373639333236 - значение элемента данных в последовательности (ItemValue)'
    }

    // Software ID readout
    def "should parse Software ID READ_RESPONSE apdu package"() {
        given:
        def result = frame.parse('E6 E7 00 0C 01 02 01 00 01 0C 01 00 0A 08 42 32 47 35 76 33 35 61')

        expect:
        result ==
                'E6E700 - логическое управление каналом (logical link control)\n' +
                '0C - тип APDU пакета (APDU type) APDU[12]\n' +
                '01 - количество элементов в последовательности (Quantity) - 1\n' +
                '02 - тип переменной доступа (ReadResponseFormat) ReadResponse[2]\n' +
                '01 - признак последнего блока (LastBlock flag)\n' +
                '0001 - номер блока данных (BlockNumber) - 1\n' +
                '0C - длина блока данных в байтах (DataBlockLength) - 12\n' +
                '01 - количество элементов в последовательности (Quantity) - 1\n' +
                '00 - значение диагностики источника результата (0x00 - success)\n' +
                '0A - тип данных элемента данных в последовательности (ItemType) - DataType[10]\n' +
                '08 - длина элемента данных в байтах (ItemLength) - 8\n' +
                '4232473576333561 - значение элемента данных в последовательности (ItemValue)'
    }

    def "should parse simple universal single item READ_RESPONSE apdu package"() {
        given:
        def result = frame.parse('E6 E7 00 0C 01 02 00 00 01 05 01 00 12 00 08')

        expect:
        result ==
                'E6E700 - логическое управление каналом (logical link control)\n' +
                '0C - тип APDU пакета (APDU type) APDU[12]\n' +
                '01 - количество элементов в последовательности (Quantity) - 1\n' +
                '02 - тип переменной доступа (ReadResponseFormat) ReadResponse[2]\n' +
                '00 - признак последнего блока (LastBlock flag)\n' +
                '0001 - номер блока данных (BlockNumber) - 1\n' +
                '05 - длина блока данных в байтах (DataBlockLength) - 5\n' +
                '01 - количество элементов в последовательности (Quantity) - 1\n' +
                '00 - значение диагностики источника результата (0x00 - success)\n' +
                '12 - тип данных элемента данных в последовательности (ItemType) - DataType[18]\n' +
                '0008 - значение элемента данных в последовательности (ItemValue)'
    }

    def "should parse simple multi items READ_RESPONSE apdu package with two same items"() {
        given:
        def result = frame.parse('E6 E7 00 0C 01 02 01 00 01 17 02 00 0A 08 42 32 47 35 76 33 35 61 00 0A 08 42 32 47 35 76 33 35 61')

        expect:
        result ==
                'E6E700 - логическое управление каналом (logical link control)\n' +
                '0C - тип APDU пакета (APDU type) APDU[12]\n' +
                '01 - количество элементов в последовательности (Quantity) - 1\n' +
                '02 - тип переменной доступа (ReadResponseFormat) ReadResponse[2]\n' +
                '01 - признак последнего блока (LastBlock flag)\n' +
                '0001 - номер блока данных (BlockNumber) - 1\n' +
                '17 - длина блока данных в байтах (DataBlockLength) - 23\n' +
                '02 - количество элементов в последовательности (Quantity) - 2\n' +
                '00 - значение диагностики источника результата (0x00 - success)\n' +
                '0A - тип данных элемента данных в последовательности (ItemType) - DataType[10]\n' +
                '08 - длина элемента данных в байтах (ItemLength) - 8\n' +
                '4232473576333561 - значение элемента данных в последовательности (ItemValue)\n' +
                '00 - значение диагностики источника результата (0x00 - success)\n' +
                '0A - тип данных элемента данных в последовательности (ItemType) - DataType[10]\n' +
                '08 - длина элемента данных в байтах (ItemLength) - 8\n' +
                '4232473576333561 - значение элемента данных в последовательности (ItemValue)'
    }

    def "should parse simple multi items READ_RESPONSE apdu package with two different items"() {
        given:
        def result = frame.parse('E6 E7 00 0C 01 02 00 00 01 6D 04 00 12 00 08 09 06 00 00 01 00 00 FF')

        expect:
        result ==
                'E6E700 - логическое управление каналом (logical link control)\n' +
                '0C - тип APDU пакета (APDU type) APDU[12]\n' +
                '01 - количество элементов в последовательности (Quantity) - 1\n' +
                '02 - тип переменной доступа (ReadResponseFormat) ReadResponse[2]\n' +
                '00 - признак последнего блока (LastBlock flag)\n' +
                '0001 - номер блока данных (BlockNumber) - 1\n' +
                '6D - длина блока данных в байтах (DataBlockLength) - 109\n' +
                '04 - количество элементов в последовательности (Quantity) - 4\n' +
                '00 - значение диагностики источника результата (0x00 - success)\n' +
                '12 - тип данных элемента данных в последовательности (ItemType) - DataType[18]\n' +
                '0008 - значение элемента данных в последовательности (ItemValue)\n' +
                '09 - тип данных элемента данных в последовательности (ItemType) - DataType[9]\n' +
                '06 - длина элемента данных в байтах (ItemLength) - 6\n' +
                '0000010000FF - значение элемента данных в последовательности (ItemValue)'
    }

    def "should parse simple multi items READ_RESPONSE apdu package with four different items"() {
        given:
        def result = frame.parse('E6 E7 00 0C 01 02 00 00 01 6D 04 00 12 00 08 09 06 00 00 01 00 00 FF 0F 02 12 00 00')

        expect:
        result ==
                'E6E700 - логическое управление каналом (logical link control)\n' +
                '0C - тип APDU пакета (APDU type) APDU[12]\n' +
                '01 - количество элементов в последовательности (Quantity) - 1\n' +
                '02 - тип переменной доступа (ReadResponseFormat) ReadResponse[2]\n' +
                '00 - признак последнего блока (LastBlock flag)\n' +
                '0001 - номер блока данных (BlockNumber) - 1\n' +
                '6D - длина блока данных в байтах (DataBlockLength) - 109\n' +
                '04 - количество элементов в последовательности (Quantity) - 4\n' +
                '00 - значение диагностики источника результата (0x00 - success)\n' +
                '12 - тип данных элемента данных в последовательности (ItemType) - DataType[18]\n' +
                '0008 - значение элемента данных в последовательности (ItemValue)\n' +
                '09 - тип данных элемента данных в последовательности (ItemType) - DataType[9]\n' +
                '06 - длина элемента данных в байтах (ItemLength) - 6\n' +
                '0000010000FF - значение элемента данных в последовательности (ItemValue)\n' +
                '0F - тип данных элемента данных в последовательности (ItemType) - DataType[15]\n' +
                '02 - значение элемента данных в последовательности (ItemValue)\n' +
                '12 - тип данных элемента данных в последовательности (ItemType) - DataType[18]\n' +
                '0000 - значение элемента данных в последовательности (ItemValue)'
    }

    // Profile readout
    // following objects are requesting: capture_objects, capture_period, sort_method, sort_object, profile_entries
    // осуществляется запрос:
    // [a] список захватываемых (опрашиваемых) объектов;
    // [b] в период захвата (период, за который считываются данные);
    // [c] метод сортировки;
    // [d] объект сортировки;
    // [e] записи профиля;
    def "should parse multi items READ_REQUEST apdu package"() {
        given:
        def result = frame.parse('E6 E6 00 05 05 02 CF 10 02 CF 18 02 CF 20 02 CF 28 02 CF 38')

        expect:
        result ==
                'E6E600 - логическое управление каналом (logical link control)\n' +
                '05 - тип APDU пакета (APDU type) APDU[5]\n' +
                '05 - количество элементов в последовательности (Quantity) - 5\n' +
                '02 - тип переменной доступа (VAS type) VAS[2]\n' +
                'CF10 - короткое имя запрашиваемого объекта (ShortName)\n' +
                '02 - тип переменной доступа (VAS type) VAS[2]\n' +
                'CF18 - короткое имя запрашиваемого объекта (ShortName)\n' +
                '02 - тип переменной доступа (VAS type) VAS[2]\n' +
                'CF20 - короткое имя запрашиваемого объекта (ShortName)\n' +
                '02 - тип переменной доступа (VAS type) VAS[2]\n' +
                'CF28 - короткое имя запрашиваемого объекта (ShortName)\n' +
                '02 - тип переменной доступа (VAS type) VAS[2]\n' +
                'CF38 - короткое имя запрашиваемого объекта (ShortName)'
    }
    // Daily profile readout
    def "should parse daily profile READ_RESPONSE apdu package"() {
        given:
        def result = frame.parse('E6 E7 00 0C 01 02 00 00 01 6D 05 00 01 1D 02 04 12 00 08 09 06 00 00 01 00 00 FF 0F 02 12 00 00 02 04 12 00 01 09 06 01 00 60 3E 04 FF 0F 02 12 00 00 02 04 12 00 03 09 06 01 00 00 01 03 FF 0F 02 12 00 00 02 04 12 00 03 09 06 01 00 60 3C 14 FF 0F 02 12 00 00 02 04 12 00 03 09 06 01 00 01 08 00 FF 0F 02 12 00 00 02 04 12 00 03 09 06 01 00 01 08 01 FF 0F 02')

        expect:
        result ==
                'E6E700 - логическое управление каналом (logical link control)\n' +
                '0C - тип APDU пакета (APDU type) APDU[12]\n' +
                '01 - количество элементов в последовательности (Quantity) - 1\n' +
                '02 - тип переменной доступа (ReadResponseFormat) ReadResponse[2]\n' +
                '00 - признак последнего блока (LastBlock flag)\n' +
                '0001 - номер блока данных (BlockNumber) - 1\n' +
                '6D - длина блока данных в байтах (DataBlockLength) - 109\n' +
                '05 - нколичество элементов в блоке данных (Quantity) - 1\n' +
                '00 - значение диагностики источника результата (0x00 - success)\n' +
                '01 - тип данных элемента данных в последовательности (ItemType) - DataType[1]\n' +
                '1D - длина элемента данных в байтах (ItemLength) - 29\n' +
                '02 - тип данных элемента данных в последовательности (ItemType) - DataType[2]\n' +
                '04 - длина элемента данных в байтах (ItemLength) - 4\n' +
                '12 - тип данных элемента данных в последовательности (ItemType) - DataType[12]\n' +
                '0008 - длина элемента данных в байтах (ItemLength) - 8\n' +
                '09 - тип данных элемента данных в последовательности (ItemType) - DataType[9]\n' +
                '06 - длина элемента данных в байтах (ItemLength) - 6\n' +
                '0000010000FF - значение элемента данных в структуре (ItemValue)\n' +
                '0F - тип данных элемента данных в последовательности (ItemType) - DataType[15]\n' +
                '02 - индекс атрибута (AttributeIndex) - 2\n' +
                '12 - тип данных элемента данных в последовательности (ItemType) - DataType[2]\n' +
                '0000 - индекс данных (DataIndex) - 2\n' +
                '02 - тип данных элемента данных в последовательности (ItemType) - DataType[2]\n' +
                '04 - длина элемента данных в байтах (ItemLength) - 4\n' +
                '12 - тип данных элемента данных в последовательности (ItemType) - DataType[12]\n' +
                '0008 - длина элемента данных в байтах (ItemLength) - 8\n' +
                '09 - тип данных элемента данных в последовательности (ItemType) - DataType[9]\n' +
                '06 - длина элемента данных в байтах (ItemLength) - 6\n' +
                '0000010000FF - значение элемента данных в структуре (ItemValue)\n' +
                '0F - тип данных элемента данных в последовательности (ItemType) - DataType[15]\n' +
                '02 - индекс атрибута (AttributeIndex) - 2\n' +
                '12 - тип данных элемента данных в последовательности (ItemType) - DataType[2]\n' +
                '0000 - индекс данных (DataIndex) - 2\n' +
                '02 - тип данных элемента данных в последовательности (ItemType) - DataType[2]\n' +
                '04 - длина элемента данных в байтах (ItemLength) - 4\n' +
                '12 - тип данных элемента данных в последовательности (ItemType) - DataType[12]\n' +
                '0008 - длина элемента данных в байтах (ItemLength) - 8\n' +
                '09 - тип данных элемента данных в последовательности (ItemType) - DataType[9]\n' +
                '06 - длина элемента данных в байтах (ItemLength) - 6\n' +
                '0000010000FF - значение элемента данных в структуре (ItemValue)\n' +
                '0F - тип данных элемента данных в последовательности (ItemType) - DataType[15]\n' +
                '02 - индекс атрибута (AttributeIndex) - 2\n' +
                '12 - тип данных элемента данных в последовательности (ItemType) - DataType[2]\n' +
                '0000 - индекс данных (DataIndex) - 2\n' +
                '02 - тип данных элемента данных в последовательности (ItemType) - DataType[2]\n' +
                '04 - длина элемента данных в байтах (ItemLength) - 4\n' +
                '12 - тип данных элемента данных в последовательности (ItemType) - DataType[12]\n' +
                '0008 - длина элемента данных в байтах (ItemLength) - 8\n' +
                '09 - тип данных элемента данных в последовательности (ItemType) - DataType[9]\n' +
                '06 - длина элемента данных в байтах (ItemLength) - 6\n' +
                '0000010000FF - значение элемента данных в структуре (ItemValue)\n' +
                '0F - тип данных элемента данных в последовательности (ItemType) - DataType[15]\n' +
                '02 - индекс атрибута (AttributeIndex) - 2\n' +
                '12 - тип данных элемента данных в последовательности (ItemType) - DataType[2]\n' +
                '0000 - индекс данных (DataIndex) - 2\n' +
                '02 - тип данных элемента данных в последовательности (ItemType) - DataType[2]\n' +
                '04 - длина элемента данных в байтах (ItemLength) - 4\n' +
                '12 - тип данных элемента данных в последовательности (ItemType) - DataType[12]\n' +
                '0008 - длина элемента данных в байтах (ItemLength) - 8\n' +
                '09 - тип данных элемента данных в последовательности (ItemType) - DataType[9]\n' +
                '06 - длина элемента данных в байтах (ItemLength) - 6\n' +
                '0000010000FF - значение элемента данных в структуре (ItemValue)\n' +
                '0F - тип данных элемента данных в последовательности (ItemType) - DataType[15]\n' +
                '02 - индекс атрибута (AttributeIndex) - 2\n' +
                '12 - тип данных элемента данных в последовательности (ItemType) - DataType[2]\n' +
                '0000 - индекс данных (DataIndex) - 2\n' +
                '02 - тип данных элемента данных в последовательности (ItemType) - DataType[2]\n' +
                '04 - длина элемента данных в байтах (ItemLength) - 4\n' +
                '12 - тип данных элемента данных в последовательности (ItemType) - DataType[12]\n' +
                '0008 - длина элемента данных в байтах (ItemLength) - 8\n' +
                '09 - тип данных элемента данных в последовательности (ItemType) - DataType[9]\n' +
                '06 - длина элемента данных в байтах (ItemLength) - 6\n' +
                '0000010000FF - значение элемента данных в структуре (ItemValue)\n' +
                '0F - тип данных элемента данных в последовательности (ItemType) - DataType[15]\n' +
                '02 - индекс атрибута (AttributeIndex) - 2'
    }

    // Association SN readout
    def "should parse AssociationSN READ_REQUEST apdu package"() {
        given:
        def result = frame.parse('E6 E6 00 05 01 02 FA 08')

        expect:
        result ==
                'E6E600 - логическое управление каналом (logical link control)\n' +
                '05 - тип APDU пакета (APDU type) APDU[5]\n' +
                '01 - количество элементов в последовательности (Quantity) - 1\n' +
                '02 - тип переменной доступа (VAS type) VAS[2]\n' +
                'FA08 - короткое имя запрашиваемого объекта (ShortName)'
    }

    def "should parse AssociationSN READ_REQUEST apdu package block 2"() {
        given:
        def result = frame.parse('E6 E6 00 05 01 05 00 01')

        expect:
        result ==
                'E6E600 - логическое управление каналом (logical link control)\n' +
                '05 - тип APDU пакета (APDU type) APDU[5]\n' +
                '01 - количество элементов в последовательности (Quantity) - 1\n' +
                '05 - тип переменной доступа (VAS type) VAS[5]\n' +
                '0001 - номер блока данных (BlockNumber) - 1'
    }

    def "should parse AssociationSN READ_RESPONSE apdu package (long three bytes length field)"() {
        given:
        def result = frame.parse('E6 E7 00 0C 01 02 00 00 01 6C 01 00 01 82 01 4F 02 04 10 00 00 12 00 03 11 00 09 06 01 00 0F 08 00 FF 02 04 10 00 18 12 00 03 11 00 09 06 01 00 0F 08 01 FF 02 04 10 00 30 12 00 03 11 00 09 06 01 00 0F 08 02 FF 02 04 10 00 48 12 00 03 11 00 09 06 01 00 0F 08 03 FF 02 04 10 00 60 12 00 03 11 00 09 06 01 00 0F 08 04 FF 02 04 10 01 00 12 00 03 11 00 09 06')

        expect:
        result ==
                'E6E700 - логическое управление каналом (logical link control)\n' +
                '0C - тип APDU пакета (APDU type) APDU[12]\n' +
                '01 - количество элементов в последовательности (Quantity) - 1\n' +
                '02 - тип переменной доступа (ReadResponseFormat) ReadResponse[2]\n' +
                '00 - признак последнего блока (LastBlock flag)\n' +
                '0001 - номер блока данных (BlockNumber) - 1\n' +
                '6C - длина блока данных в байтах (DataBlockLength) - 108\n' +
                '01 - количество элементов в последовательности (Quantity) - 1\n' +
                '00 - значение диагностики источника результата (0x00 - success)\n' +
                '01 - тип данных элемента данных в последовательности (ItemType) - DataType[1]\n' +
                '82 - длина поля длины элемента данных в байтах (LengthOfItemLengthField) - 130\n' +
                '014F - длина элемента данных в байтах (ItemLength) - 4\n' +
                '02 - тип данных элемента данных в последовательности (ItemType) - DataType[2]\n' +
                '04 - длина элемента данных в байтах (ItemLength) - 4\n' +
                '10 - тип данных элемента данных в последовательности (ItemType) - DataType[16]\n' +
                '0000 - значение элемента данных в последовательности (ItemValue)\n' +
                '12 - тип данных элемента данных в последовательности (ItemType) - DataType[18]\n' +
                '0003 - значение элемента данных в последовательности (ItemValue)\n' +
                '11 - тип данных элемента данных в последовательности (ItemType) - DataType[17]\n' +
                '00 - значение элемента данных в последовательности (ItemValue)\n' +
                '09 - тип данных элемента данных в последовательности (ItemType) - DataType[9]\n' +
                '06 - длина элемента данных в байтах (ItemLength) - 6\n' +
                '01000F0800FF - значение элемента данных в последовательности (ItemValue)\n' +
                '02 - тип данных элемента данных в последовательности (ItemType) - DataType[2]\n' +
                '04 - длина элемента данных в байтах (ItemLength) - 4\n' +
                '10 - тип данных элемента данных в последовательности (ItemType) - DataType[16]\n' +
                '0018 - значение элемента данных в последовательности (ItemValue)\n' +
                '12 - тип данных элемента данных в последовательности (ItemType) - DataType[18]\n' +
                '0003 - значение элемента данных в последовательности (ItemValue)\n' +
                '11 - тип данных элемента данных в последовательности (ItemType) - DataType[17]\n' +
                '00 - значение элемента данных в последовательности (ItemValue)\n' +
                '09 - тип данных элемента данных в последовательности (ItemType) - DataType[9]\n' +
                '06 - длина элемента данных в байтах (ItemLength) - 6\n' +
                '01000F0801FF - значение элемента данных в структуре (ItemValue)\n' +
                '02 - тип данных элемента данных в последовательности (ItemType) - DataType[2]\n' +
                '04 - длина элемента данных в байтах (ItemLength) - 4\n' +
                '10 - тип данных элемента данных в последовательности (ItemType) - DataType[16]\n' +
                '0030 - значение элемента данных (ItemValue)\n' +
                '12 - тип данных элемента данных в последовательности (ItemType) - DataType[18]\n' +
                '0003 - значение элемента данных (ItemValue)\n' +
                '11 - тип данных элемента данных в последовательности (ItemType) - DataType[17]\n' +
                '00 - значение элемента данных (ItemValue)\n' +
                '09 - тип данных элемента данных в последовательности (ItemType) - DataType[9]\n' +
                '06 - длина элемента данных в байтах (ItemLength) - 6\n' +
                '01000F0802FF - значение элемента данных в структуре (ItemValue)\n' +
                '02 - тип данных элемента данных в последовательности (ItemType) - DataType[2]\n' +
                '04 - длина элемента данных в байтах (ItemLength) - 4\n' +
                '10 - тип данных элемента данных в последовательности (ItemType) - DataType[16]\n' +
                '0048 - значение элемента данных в последовательности (ItemValue)\n' +
                '12 - тип данных элемента данных в последовательности (ItemType) - DataType[18]\n' +
                '0003 - значение элемента данных в последовательности (ItemValue)\n' +
                '11 - тип данных элемента данных в последовательности (ItemType) - DataType[17]\n' +
                '00 - значение элемента данных в последовательности (ItemValue)\n' +
                '09 - тип данных элемента данных в последовательности (ItemType) - DataType[9]\n' +
                '06 - длина элемента данных в байтах (ItemLength) - 6\n' +
                '01000F0803FF - значение элемента данных в структуре (ItemValue)\n' +
                '02 - тип данных элемента данных в последовательности (ItemType) - DataType[2]\n' +
                '04 - длина элемента данных в байтах (ItemLength) - 4\n' +
                '10 - тип данных элемента данных в последовательности (ItemType) - DataType[16]\n' +
                '0060 - значение элемента данных в последовательности (ItemValue)\n' +
                '12 - тип данных элемента данных в последовательности (ItemType) - DataType[18]\n' +
                '0003 - значение элемента данных в последовательности (ItemValue)\n' +
                '11 - тип данных элемента данных в последовательности (ItemType) - DataType[17]\n' +
                '00 - значение элемента данных в последовательности (ItemValue)\n' +
                '09 - тип данных элемента данных в последовательности (ItemType) - DataType[9]\n' +
                '06 - длина элемента данных в байтах (ItemLength) - 6\n' +
                '01000F0804FF - значение элемента данных в структуре (ItemValue)\n' +
                '02 - тип данных элемента данных в последовательности (ItemType) - DataType[2]\n' +
                '04 - длина элемента данных в байтах (ItemLength) - 4\n' +
                '10 - тип данных элемента данных в последовательности (ItemType) - DataType[16]\n' +
                '0100 - значение элемента данных в последовательности (ItemValue)\n' +
                '12 - тип данных элемента данных в последовательности (ItemType) - DataType[18]\n' +
                '0003 - значение элемента данных в последовательности (ItemValue)\n' +
                '11 - тип данных элемента данных в последовательности (ItemType) - DataType[17]\n' +
                '00 - значение элемента данных в последовательности (ItemValue)\n' +
                '09 - тип данных элемента данных в последовательности (ItemType) - DataType[9]\n' +
                '06 - длина элемента данных в байтах (ItemLength) - 6'
    }

    def "should parse AssociationSN READ_RESPONSE apdu package (without truncated data item)"() {
        given:
        def result = frame.parse('E6 E7 00 0C 01 02 00 00 01 6C 01 00 01 82 01 4F 02 04 10 00 00 12 00 03 11 00 09 06 01 00 0F 08 00 FF 02 04 10 00 18 12 00 03 11 00')

        expect:
        result ==
                'E6E700 - логическое управление каналом (logical link control)\n' +
                '0C - тип APDU пакета (APDU type) APDU[12]\n' +
                '01 - количество элементов в последовательности (Quantity) - 1\n' +
                '02 - тип переменной доступа (ReadResponseFormat) ReadResponse[2]\n' +
                '00 - признак последнего блока (LastBlock flag)\n' +
                '0001 - номер блока данных (BlockNumber) - 1\n' +
                '6C - длина блока данных в байтах (DataBlockLength) - 108\n' +
                '01 - количество элементов в последовательности (Quantity) - 1\n' +
                '00 - значение диагностики источника результата (0x00 - success)\n' +
                '01 - тип данных элемента данных в последовательности (ItemType) - DataType[1]\n' +
                '82 - длина элемента данных в байтах (ItemLength) - 130\n' +
                '014F - длина элемента данных в байтах (ItemLength) - 335\n' +
                '02 - тип данных элемента данных в последовательности (ItemType) - DataType[2]\n' +
                '04 - длина элемента данных в байтах (ItemLength) - 4\n' +
                '10 - тип данных элемента данных в последовательности (ItemType) - DataType[16]\n' +
                '0000 - значение элемента данных в последовательности (ItemValue)\n' +
                '12 - тип данных элемента данных в последовательности (ItemType) - DataType[18]\n' +
                '0003 - значение элемента данных в последовательности (ItemValue)\n' +
                '11 - тип данных элемента данных в последовательности (ItemType) - DataType[17]\n' +
                '00 - значение элемента данных в последовательности (ItemValue)\n' +
                '09 - тип данных элемента данных в последовательности (ItemType) - DataType[9]\n' +
                '06 - длина элемента данных в байтах (ItemLength) - 6\n' +
                '01000F0800FF - значение элемента данных в последовательности (ItemValue)\n' +
                '02 - тип данных элемента данных в последовательности (ItemType) - DataType[2]\n' +
                '04 - длина элемента данных в байтах (ItemLength) - 4\n' +
                '10 - тип данных элемента данных в последовательности (ItemType) - DataType[16]\n' +
                '0018 - значение элемента данных в последовательности (ItemValue)\n' +
                '12 - тип данных элемента данных в последовательности (ItemType) - DataType[18]\n' +
                '0003 - значение элемента данных в последовательности (ItemValue)\n' +
                '11 - тип данных элемента данных в последовательности (ItemType) - DataType[17]\n' +
                '00 - значение элемента данных в последовательности (ItemValue)'
//                '09 - тип данных элемента данных в последовательности (ItemType) - DataType[9]\n' +
//                '06 - длина элемента данных в байтах (ItemLength) - 6\n' +
//                '01000F0801FF - значение элемента данных в структуре (ItemValue)\n' +
//                '02 - тип данных элемента данных в последовательности (ItemType) - DataType[2]\n' +
//                '04 - длина элемента данных в байтах (ItemLength) - 4\n' +
//                '10 - тип данных элемента данных в последовательности (ItemType) - DataType[16]\n' +
//                '0030 - значение элемента данных (ItemValue)\n' +
//                '12 - тип данных элемента данных в последовательности (ItemType) - DataType[18]\n' +
//                '0003 - значение элемента данных (ItemValue)\n' +
//                '11 - тип данных элемента данных в последовательности (ItemType) - DataType[17]\n' +
//                '00 - значение элемента данных (ItemValue)\n' +
//                '09 - тип данных элемента данных в последовательности (ItemType) - DataType[9]\n' +
//                '06 - длина элемента данных в байтах (ItemLength) - 6\n' +
//                '01000F0802FF - значение элемента данных в структуре (ItemValue)\n' +
//                '02 - тип данных элемента данных в последовательности (ItemType) - DataType[2]\n' +
//                '04 - длина элемента данных в байтах (ItemLength) - 4\n' +
//                '10 - тип данных элемента данных в последовательности (ItemType) - DataType[16]\n' +
//                '0048 - значение элемента данных в последовательности (ItemValue)\n' +
//                '12 - тип данных элемента данных в последовательности (ItemType) - DataType[18]\n' +
//                '0003 - значение элемента данных в последовательности (ItemValue)\n' +
//                '11 - тип данных элемента данных в последовательности (ItemType) - DataType[17]\n' +
//                '00 - значение элемента данных в последовательности (ItemValue)\n' +
//                '09 - тип данных элемента данных в последовательности (ItemType) - DataType[9]\n' +
//                '06 - длина элемента данных в байтах (ItemLength) - 6\n' +
//                '01000F0803FF - значение элемента данных в структуре (ItemValue)\n' +
//                '02 - тип данных элемента данных в последовательности (ItemType) - DataType[2]\n' +
//                '04 - длина элемента данных в байтах (ItemLength) - 4\n' +
//                '10 - тип данных элемента данных в последовательности (ItemType) - DataType[16]\n' +
//                '0060 - значение элемента данных в последовательности (ItemValue)\n' +
//                '12 - тип данных элемента данных в последовательности (ItemType) - DataType[18]\n' +
//                '0003 - значение элемента данных в последовательности (ItemValue)\n' +
//                '11 - тип данных элемента данных в последовательности (ItemType) - DataType[17]\n' +
//                '00 - значение элемента данных в последовательности (ItemValue)\n' +
//                '09 - тип данных элемента данных в последовательности (ItemType) - DataType[9]\n' +
//                '06 - длина элемента данных в байтах (ItemLength) - 6\n' +
//                '01000F0804FF - значение элемента данных в структуре (ItemValue)\n' +
//                '02 - тип данных элемента данных в последовательности (ItemType) - DataType[2]\n' +
//                '04 - длина элемента данных в байтах (ItemLength) - 4\n' +
//                '10 - тип данных элемента данных в последовательности (ItemType) - DataType[16]\n' +
//                '0100 - значение элемента данных в последовательности (ItemValue)\n' +
//                '12 - тип данных элемента данных в последовательности (ItemType) - DataType[18]\n' +
//                '0003 - значение элемента данных в последовательности (ItemValue)\n' +
//                '11 - тип данных элемента данных в последовательности (ItemType) - DataType[17]\n' +
//                '00 - значение элемента данных в последовательности (ItemValue)'
    }

    def "should parse AssociationSN READ_RESPONSE apdu package (with truncated data item)"() {
        given:
        def result = frame.parse('E6 E7 00 0C 01 02 00 00 01 6C 01 00 01 82 01 4F 02 04 10 00 00 12 00 03 11 00 09 06 01 00 0F 08 00 FF 02 04 10 00 18 12 00 03 11 00 09 06')

        expect:
        result ==
                'E6E700 - логическое управление каналом (logical link control)\n' +
                '0C - тип APDU пакета (APDU type) APDU[12]\n' +
                '01 - количество элементов в последовательности (Quantity) - 1\n' +
                '02 - тип переменной доступа (ReadResponseFormat) ReadResponse[2]\n' +
                '00 - признак последнего блока (LastBlock flag)\n' +
                '0001 - номер блока данных (BlockNumber) - 1\n' +
                '6C - длина блока данных в байтах (DataBlockLength) - 108\n' +
                '01 - количество элементов в последовательности (Quantity) - 1\n' +
                '00 - значение диагностики источника результата (0x00 - success)\n' +
                '01 - тип данных элемента данных в последовательности (ItemType) - DataType[1]\n' +
                '82 - длина поля длины элемента данных в байтах (LengthOfItemLengthField) - 130\n' +
                '014F - длина элемента данных в байтах (ItemLength) - 4\n' +
                '02 - тип данных элемента данных в последовательности (ItemType) - DataType[2]\n' +
                '04 - длина элемента данных в байтах (ItemLength) - 4\n' +
                '10 - тип данных элемента данных в последовательности (ItemType) - DataType[16]\n' +
                '0000 - значение элемента данных в последовательности (ItemValue)\n' +
                '12 - тип данных элемента данных в последовательности (ItemType) - DataType[18]\n' +
                '0003 - значение элемента данных в последовательности (ItemValue)\n' +
                '11 - тип данных элемента данных в последовательности (ItemType) - DataType[17]\n' +
                '00 - значение элемента данных в последовательности (ItemValue)\n' +
                '09 - тип данных элемента данных в последовательности (ItemType) - DataType[9]\n' +
                '06 - длина элемента данных в байтах (ItemLength) - 6\n' +
                '01000F0800FF - значение элемента данных в последовательности (ItemValue)\n' +
                '02 - тип данных элемента данных в последовательности (ItemType) - DataType[2]\n' +
                '04 - длина элемента данных в байтах (ItemLength) - 4\n' +
                '10 - тип данных элемента данных в последовательности (ItemType) - DataType[16]\n' +
                '0018 - значение элемента данных в последовательности (ItemValue)\n' +
                '12 - тип данных элемента данных в последовательности (ItemType) - DataType[18]\n' +
                '0003 - значение элемента данных в последовательности (ItemValue)\n' +
                '11 - тип данных элемента данных в последовательности (ItemType) - DataType[17]\n' +
                '00 - значение элемента данных в последовательности (ItemValue)\n' +
                '09 - тип данных элемента данных в последовательности (ItemType) - DataType[9]\n' +
                '06 - длина элемента данных в байтах (ItemLength) - 6'
    }

    // 	AA using lowest security level (response)
    def "should parse simple AARQ - lowest security level"() {
        given:
        def result = frame.parse('E6 E6 00 60 1D A1 09 06 07 60 85 74 05 08 01 02 BE 10 04 0E 01 00 00 00 06 5F 1F 04 00 1C 03 20 00 00')

        expect:
        result ==
                'E6E600 - логическое управление каналом (logical link control)\n' +
                '60 - тип APDU пакета (APDU type) APDU[96]\n' +
                '1D - длина запроса ассоциации приложения в байтах (AARQ Length) - 29\n' +
                'A1 - тег элемента управления ассоциацией (ACSE Tag) - [161]\n' +
                '09 - длина элемента службы управления ассоциацией в байтах (ACSE Length) - 9\n' +
                '06 - тип данных закодированного значения ACSE (ACSE Data Type) - DataType[6]\n' +
                '07 - длина значения элемента службы управления ассоциацией в байтах (ACSE Data Length) - 7\n' +
                '60857405080102 - значения элемента службы управления ассоциацией (ACSE Value)\n' +
                'BE - тег элемента управления ассоциацией (ACSE Tag) - [190]\n' +
                '10 - длина элемента службы управления ассоциацией в байтах (ACSE Length) - 16\n' +
                '04 - тип данных закодированного значения ACSE (ACSE Data Type) - DataType[4]\n' +
                '0E - длина значения элемента службы управления ассоциацией в байтах (ACSE Data Length) - 14\n' +
                '01000000065F1F04001C03200000 - значения элемента службы управления ассоциацией (ACSE Value)'
    }

    // 	AA using low level authentication (LLS) with blank password (response)
    def "should parse AARQ - low level authentication with blank password"() {
        given:
        def result = frame.parse('E6 E6 00 60 3A A1 09 06 07 60 85 74 05 08 01 02 A6 0A 04 08 45 47 4D 36 39 33 32 36 8A 02 07 80 8B 07 60 85 74 05 08 02 01 AC 02 80 00 BE 10 04 0E 01 00 00 00 06 5F 1F 04 00 1C 1B 20 00 00')

        expect:
        result ==
                'E6E600 - логическое управление каналом (logical link control)\n' +
                '60 - тип APDU пакета (APDU type) APDU[96]\n' +
                '3A - длина запроса ассоциации приложения в байтах (AARQ Length) - 58\n' +
                'A1 - тег элемента управления ассоциацией (ACSE Tag) - [161]\n' +   // Tag [1] - application-context-name
                '09 - длина элемента службы управления ассоциацией в байтах (ACSE Length) - 9\n' +
                '06 - тип данных закодированного значения ACSE (ACSE Data Type) - DataType[6]\n' +
                '07 - длина значения элемента службы управления ассоциацией в байтах (ACSE Data Length) - 7\n' +
                '60857405080102 - значения элемента службы управления ассоциацией (ACSE Value)\n' + // Идентификатор объекта - короткое имя (SN referencing), шифрование не используется (no ciphering used))
                'A6 - тег элемента управления ассоциацией (ACSE Tag) - [166]\n' +   // Tag [6] - calling-AP-title
                '0A - длина элемента службы управления ассоциацией в байтах (ACSE Length) - 10\n' +
                '04 - тип данных закодированного значения ACSE (ACSE Data Type) - DataType[4]\n' +
                '08 - длина значения элемента службы управления ассоциацией в байтах (ACSE Data Length) - 8\n' +
                '45474D3639333236 - значения элемента службы управления ассоциацией (ACSE Value)\n' +
                '8A - тег элемента управления ассоциацией (ACSE Tag) - [138]\n' +   // Tag [10] - требования службы управления ассоциацией к отправителю
                '02 - длина элемента службы управления ассоциацией в байтах (ACSE Length) - 2\n' +
                '07 - тип данных закодированного значения ACSE (ACSE Data Type) - DataType[7]\n' +  // количество неиспользуемых битов в последнем байте
                '80 - длина значения элемента службы управления ассоциацией в байтах (ACSE Data Length) - 0\n' +    // кодирование функционального блока проверки подлинности (0 - нет проверки подлинности)
                '8B - тег элемента управления ассоциацией (ACSE Tag) - [139]\n' +   // Tag [11] - Кодирование компонента - authentication-mechanism-name
                '07 - длина элемента службы управления ассоциацией в байтах (ACSE Length) - 7\n' +
                '60857405080201 - значения элемента службы управления ассоциацией (ACSE Value)\n' + // наименование механизма аутентификации - mechanism_id(1): low-level-security
                'AC - тег элемента управления ассоциацией (ACSE Tag) - [172]\n' +   // Tag [12] - Кодирование компонента - calling-authentication-value
                '02 - длина элемента службы управления ассоциацией в байтах (ACSE Length) - 2\n' +
                '80 - тип данных закодированного значения ACSE (ACSE Data Type) - DataType[-128]\n' +   // тип значения, используемого для аутинтификации - charstring [0] IMPLICIT GraphicString
                '00 - длина значения элемента службы управления ассоциацией в байтах (ACSE Data Length) - 0\n' + // пароль (0 - пустой) - blank password
                'BE - тег элемента управления ассоциацией (ACSE Tag) - [190]\n' +   // Tag [30] - Association-information
                '10 - длина элемента службы управления ассоциацией в байтах (ACSE Length) - 16\n' +
                '04 - тип данных закодированного значения ACSE (ACSE Data Type) - DataType[4]\n' +
                '0E - длина значения элемента службы управления ассоциацией в байтах (ACSE Data Length) - 14\n' +
                '01000000065F1F04001C1B200000 - значения элемента службы управления ассоциацией (ACSE Value)'
    }

    def "should parse AARE - low level authentication with blank password"() {
        given:
        def result = frame.parse('E6 E7 00 61 29 A1 09 06 07 60 85 74 05 08 01 02 A2 03 02 01 00 A3 05 A1 03 02 01 00 BE 10 04 0E 08 00 06 5F 1F 04 00 1C 13 20 00 7A FA 00')

        expect:
        result ==
                'E6E700 - логическое управление каналом (logical link control)\n' +
                '61 - тип APDU пакета (APDU type) APDU[97]\n' +
                '29 - длина запроса ассоциации приложения в байтах (AARQ Length) - 41\n' +
                'A1 - тег элемента управления ассоциацией (ACSE Tag) - [161]\n' +
                '09 - длина элемента службы управления ассоциацией в байтах (ACSE Length) - 9\n' +
                '06 - тип данных закодированного значения ACSE (ACSE Data Type) - DataType[6]\n' +
                '07 - длина значения элемента службы управления ассоциацией в байтах (ACSE Data Length) - 7\n' +
                '60857405080102 - значения элемента службы управления ассоциацией (ACSE Value)\n' +
                'A2 - тег элемента управления ассоциацией (ACSE Tag) - [162]\n' +
                '03 - длина элемента службы управления ассоциацией в байтах (ACSE Length) - 3\n' +
                '02 - тип данных закодированного значения ACSE (ACSE Data Type) - DataType[2]\n' +
                '01 - длина значения элемента службы управления ассоциацией в байтах (ACSE Data Length) - 1\n' +
                '00 - значения элемента службы управления ассоциацией (ACSE Value)\n' +
                'A3 - тег элемента управления ассоциацией (ACSE Tag) - [163]\n' +
                '05 - длина элемента службы управления ассоциацией в байтах (ACSE Length) - 5\n' +
                'A1 - тип данных закодированного значения ACSE (ACSE Data Type) - DataType[-95]\n' +
                '03 - длина значения элемента службы управления ассоциацией в байтах (ACSE Data Length) - 3\n' +
                '020100 - значения элемента службы управления ассоциацией (ACSE Value)\n' +
                'BE - тег элемента управления ассоциацией (ACSE Tag) - [190]\n' +
                '10 - длина элемента службы управления ассоциацией в байтах (ACSE Length) - 16\n' +
                '04 - тип данных закодированного значения ACSE (ACSE Data Type) - DataType[4]\n' +
                '0E - длина значения элемента службы управления ассоциацией в байтах (ACSE Data Length) - 14\n' +
                '0800065F1F04001C1320007AFA00 - значения элемента службы управления ассоциацией (ACSE Value)'
    }

    def "should parse AssociationLN response (logical name access)"() {
        given:
        def result =  frame.parse('E6 E7 00 C4 02 C1 00 00 00 00 01 00 02 01 50')

        expect:
        result ==
                'E6E700 - логическое управление каналом (logical link control)\n' +
                'C4 - тип APDU пакета (APDU type) APDU[196]\n' +
                '02 - тип GetRequest GR[2]\n' +
                'C1 - тип GetRequestNormal GRN[193]\n' +
                '00 - признак последнего блока (LastBlock flag)\n' +
                '00000001 - номер блока данных (BlockNumber) - 1\n' +
                '00 - значение диагностики источника результата (0x00 - success)\n' +
                '02 - длина блока данных в байтах (DataBlockLength) - 2\n' +
                '01 - тип данных элемента данных в последовательности (ItemType) - DataType[1]\n' +
                '50 - длина элемента данных в байтах (ItemLength) - 80'
    }

    def "should parse AssociationLN request block 2"() {
        given:
        def result =  frame.parse('E6 E6 00 C0 02 C1 00 00 00 01')

        expect:
        result ==
                'E6E600 - логическое управление каналом (logical link control)\n' +
                'C0 - тип APDU пакета (APDU type) APDU[192]\n' +
                '02 - тип GetRequest GR[2]\n' +
                'C1 - тип GetRequestNormal GRN[193]\n' +
                '00000001 - номер блока данных (BlockNumber) - 1'
    }

    def "should parse AssociationLN response block 2"() {
        given:
        def result =  frame.parse('E6 E7 00 C4 02 C1 00 00 00 00 02 00 13 02 04 12 00 08 11 00 09 06 00 00 01 00 00 FF 02 02 01 09')

        expect:
        result ==
                'E6E700 - логическое управление каналом (logical link control)\n' +
                'C4 - тип APDU пакета (APDU type) APDU[196]\n' +
                '02 - тип GetRequest GR[2]\n' +
                'C1 - тип GetRequestNormal GRN[193]\n' +
                '00 - признак последнего блока (LastBlock flag)\n' +
                '00000002 - номер блока данных (BlockNumber) - 2\n' +
                '00 - значение диагностики источника результата (0x00 - success)\n' +
                '13 - длина блока данных в байтах (DataBlockLength) - 19\n' +
                '02 - тип данных элемента данных в последовательности (ItemType) - DataType[2]\n' +
                '04 - длина элемента данных в байтах (ItemLength) - 4\n' +
                '12 - тип данных элемента данных в последовательности (ItemType) - DataType[18]\n' +
                '0008 - значение элемента данных в последовательности (ItemValue)\n' +
                '11 - тип данных элемента данных в последовательности (ItemType) - DataType[17]\n' +
                '00 - значение элемента данных в последовательности (ItemValue)\n' +
                '09 - тип данных элемента данных в последовательности (ItemType) - DataType[9]\n' +
                '06 - длина элемента данных в байтах (ItemLength) - 6\n' +
                '0000010000FF - значение элемента данных в последовательности (ItemValue)\n' +
                '02 - тип данных элемента данных в последовательности (ItemType) - DataType[2]\n' +
                '02 - длина элемента данных в байтах (ItemLength) - 2\n' +
                '01 - тип данных элемента данных в последовательности (ItemType) - DataType[1]\n' +
                '09 - длина элемента данных в байтах (ItemLength) - 9'
    }

    def "should parse AssociationLN response block 3"() {
        given:
        def result =  frame.parse('E6 E7 00 C4 02 C1 00 00 00 00 03 00 38 02 03 0F 01 16 01 00 02 03 0F 02 16 01 00 02 03 0F 03 16 01 00 02 03 0F 04 16 01 00 02 03 0F 05 16 01 00 02 03 0F 06 16 01 00 02 03 0F 07 16 01 00 02 03 0F 08 16 01 00')

        expect:
        result ==
                'E6E700 - логическое управление каналом (logical link control)\n' +
                'C4 - тип APDU пакета (APDU type) APDU[196]\n' +
                '02 - тип GetRequest GR[2]\n' +
                'C1 - тип GetRequestNormal GRN[193]\n' +
                '00 - признак последнего блока (LastBlock flag)\n' +
                '00000003 - номер блока данных (BlockNumber) - 3\n' +
                '00 - значение диагностики источника результата (0x00 - success)\n' +
                '38 - длина блока данных в байтах (DataBlockLength) - 56\n' +
                '02 - тип данных элемента данных в последовательности (ItemType) - DataType[2]\n' +
                '03 - длина элемента данных в байтах (ItemLength) - 3\n' +
                '0F - тип данных элемента данных в последовательности (ItemType) - DataType[15]\n' +
                '01 - значение элемента данных в последовательности (ItemValue)\n' +
                '16 - тип данных элемента данных в последовательности (ItemType) - DataType[22]\n' +
                '01 - значение элемента данных в последовательности (ItemValue)\n' +
                '00 - тип данных элемента данных в последовательности (ItemType) - DataType[0]\n' +
                '02 - тип данных элемента данных в последовательности (ItemType) - DataType[2]\n' +
                '03 - длина элемента данных в байтах (ItemLength) - 3\n' +
                '0F - тип данных элемента данных в последовательности (ItemType) - DataType[15]\n' +
                '02 - значение элемента данных в последовательности (ItemValue)\n' +
                '16 - тип данных элемента данных в последовательности (ItemType) - DataType[22]\n' +
                '01 - значение элемента данных в последовательности (ItemValue)\n' +
                '00 - тип данных элемента данных в последовательности (ItemType) - DataType[0]\n' +
                '02 - тип данных элемента данных в последовательности (ItemType) - DataType[2]\n' +
                '03 - длина элемента данных в байтах (ItemLength) - 3\n' +
                '0F - тип данных элемента данных в последовательности (ItemType) - DataType[15]\n' +
                '03 - значение элемента данных в последовательности (ItemValue)\n' +
                '16 - тип данных элемента данных в последовательности (ItemType) - DataType[22]\n' +
                '01 - значение элемента данных в последовательности (ItemValue)\n' +
                '00 - тип данных элемента данных в последовательности (ItemType) - DataType[0]\n' +
                '02 - тип данных элемента данных в последовательности (ItemType) - DataType[2]\n' +
                '03 - длина элемента данных в байтах (ItemLength) - 3\n' +
                '0F - тип данных элемента данных в последовательности (ItemType) - DataType[15]\n' +
                '04 - значение элемента данных в последовательности (ItemValue)\n' +
                '16 - тип данных элемента данных в последовательности (ItemType) - DataType[22]\n' +
                '01 - значение элемента данных в последовательности (ItemValue)\n' +
                '00 - тип данных элемента данных в последовательности (ItemType) - DataType[0]\n' +
                '02 - тип данных элемента данных в последовательности (ItemType) - DataType[2]\n' +
                '03 - длина элемента данных в байтах (ItemLength) - 3\n' +
                '0F - тип данных элемента данных в последовательности (ItemType) - DataType[15]\n' +
                '05 - значение элемента данных в последовательности (ItemValue)\n' +
                '16 - тип данных элемента данных в последовательности (ItemType) - DataType[22]\n' +
                '01 - значение элемента данных в последовательности (ItemValue)\n' +
                '00 - тип данных элемента данных в последовательности (ItemType) - DataType[0]\n' +
                '02 - тип данных элемента данных в последовательности (ItemType) - DataType[2]\n' +
                '03 - длина элемента данных в байтах (ItemLength) - 3\n' +
                '0F - тип данных элемента данных в последовательности (ItemType) - DataType[15]\n' +
                '06 - значение элемента данных в последовательности (ItemValue)\n' +
                '16 - тип данных элемента данных в последовательности (ItemType) - DataType[22]\n' +
                '01 - значение элемента данных в последовательности (ItemValue)\n' +
                '00 - тип данных элемента данных в последовательности (ItemType) - DataType[0]\n' +
                '02 - тип данных элемента данных в последовательности (ItemType) - DataType[2]\n' +
                '03 - длина элемента данных в байтах (ItemLength) - 3\n' +
                '0F - тип данных элемента данных в последовательности (ItemType) - DataType[15]\n' +
                '07 - значение элемента данных в последовательности (ItemValue)\n' +
                '16 - тип данных элемента данных в последовательности (ItemType) - DataType[22]\n' +
                '01 - значение элемента данных в последовательности (ItemValue)\n' +
                '00 - возможно это разделитель, а не тип данных\n' +
                '02 - тип данных элемента данных в последовательности (ItemType) - DataType[2]\n' +
                '03 - длина элемента данных в байтах (ItemLength) - 3\n' +
                '0F - тип данных элемента данных в последовательности (ItemType) - DataType[15]\n' +
                '08 - значение элемента данных в последовательности (ItemValue)\n' +
                '16 - тип данных элемента данных в последовательности (ItemType) - DataType[22]\n' +
                '01 - значение элемента данных в последовательности (ItemValue)\n' +
                '00 - тип данных элемента данных в последовательности (ItemType) - DataType[0]'
    }

    def "should parse DK apdu package"() {
        given:
        def result = frame.parse('E6 E7 00 0C 01 00 01 03 02 07 09 0C 07 E2 06 07 04 17 1E 00 00 FF 88 00 09 03 00 00 00 15 00 00 00 00 00 00 00 00 15 00 00 00 00 00 00 00 00 15 00 00 00 00 00 00 00 00 15 00 00 00 00 00 00 00 00 15 00 00 00 00 00 00 00 03 02 07 09 0C 07 E2 06 08 05 00 00 00 00 FF 88 00 09 03 00 00 00 15 00 00 00 00 00 00 00 00 15 00 00 00 00 00 00 00 00 15 00 00 00')

        expect:
        result ==
                'E6E700 - логическое управление каналом (logical link control)\n' +
                '0C - тип APDU пакета (APDU type) APDU[12]\n' +
                '01 - количество элементов в последовательности (Quantity) - 1\n' +
                '00 - тип переменной доступа (ReadResponseFormat) ReadResponse[2]\n' +
                '01 - признак последнего блока (LastBlock flag)\n' +
                '0001 - номер блока данных (BlockNumber) - 1\n' +
                '6C - длина блока данных в байтах (DataBlockLength) - 108\n' +
                '01 - количество элементов в последовательности (Quantity) - 1\n' +
                '00 - значение диагностики источника результата (0x00 - success)\n' +
                '01 - тип данных элемента данных в последовательности (ItemType) - DataType[1]\n' +
                '82 - длина поля длины элемента данных в байтах (LengthOfItemLengthField) - 130\n' +
                '014F - длина элемента данных в байтах (ItemLength) - 4\n' +
                '02 - тип данных элемента данных в последовательности (ItemType) - DataType[2]\n' +
                '04 - длина элемента данных в байтах (ItemLength) - 4\n' +
                '10 - тип данных элемента данных в последовательности (ItemType) - DataType[16]\n' +
                '0000 - значение элемента данных в последовательности (ItemValue)\n' +
                '12 - тип данных элемента данных в последовательности (ItemType) - DataType[18]\n' +
                '0003 - значение элемента данных в последовательности (ItemValue)\n' +
                '11 - тип данных элемента данных в последовательности (ItemType) - DataType[17]\n' +
                '00 - значение элемента данных в последовательности (ItemValue)\n' +
                '09 - тип данных элемента данных в последовательности (ItemType) - DataType[9]\n' +
                '06 - длина элемента данных в байтах (ItemLength) - 6\n' +
                '01000F0800FF - значение элемента данных в последовательности (ItemValue)\n' +
                '02 - тип данных элемента данных в последовательности (ItemType) - DataType[2]\n' +
                '04 - длина элемента данных в байтах (ItemLength) - 4\n' +
                '10 - тип данных элемента данных в последовательности (ItemType) - DataType[16]\n' +
                '0018 - значение элемента данных в последовательности (ItemValue)\n' +
                '12 - тип данных элемента данных в последовательности (ItemType) - DataType[18]\n' +
                '0003 - значение элемента данных в последовательности (ItemValue)\n' +
                '11 - тип данных элемента данных в последовательности (ItemType) - DataType[17]\n' +
                '00 - значение элемента данных в последовательности (ItemValue)\n' +
                '09 - тип данных элемента данных в последовательности (ItemType) - DataType[9]\n' +
                '06 - длина элемента данных в байтах (ItemLength) - 6'
    }

    //	Write Request (SN request)
    def "should parse simple WRITE_REQUEST apdu package"() {
        given:
        def result = frame.parse('E6 E6 00 06 01 02 F1 40 01 02 02 09 08 49 13 F7 79 5D 2B 80 12 06 00 00 00 F0')

        expect:
        result ==
                'E6E600 - логическое управление каналом (logical link control)\n' +
                '06 - тип APDU пакета (APDU type) APDU[6]\n' +
                '01 - количество элементов в последовательности (Quantity) - 1\n' +
                '02 - тип переменной доступа (VAS type) VAS[2]\n' +
                'F140 - короткое имя запрашиваемого объекта (ShortName)\n' +
                '01 - количество элементов в блоке данных (Quantity) - 1\n' +
                '02 - тип данных элемента данных в последовательности (ItemType) - DataType[2]\n' +
                '02 - длина элемента данных в байтах (ItemLength) - 2\n' +
                '09 - тип данных элемента данных в последовательности (ItemType) - DataType[9]\n' +
                '08 - длина элемента данных в байтах (ItemLength) - 8\n' +
                '4913F7795D2B8012 - значение элемента данных в последовательности (ItemValue)\n' +
                '06 - тип данных элемента данных в последовательности (ItemType) - DataType[6]\n' +
                '000000F0 - значение элемента данных в последовательности (ItemValue)'
    }

    //	Write Response (SN request)
    def "should parse simple WRITE_RESPONSE apdu package"() {
        given:
        def result = frame.parse('E6 E7 00 0D 01 00')

        expect:
        result ==
                'E6E700 - логическое управление каналом (logical link control)\n' +
                '0D - тип APDU пакета (APDU type) APDU[13]\n' +
                '01 - количество элементов в последовательности (Quantity) - 1\n' +
                '00 - значение диагностики источника результата (0x00 - success)'
    }
}
